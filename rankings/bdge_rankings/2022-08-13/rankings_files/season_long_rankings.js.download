const draggables = document.querySelectorAll('.draggable');
const draggable_containers = document.querySelectorAll('.draggable-container');
const rankings_table_containers = document.querySelectorAll('.rankings-table-containers')

const redraft_radio_button = document.querySelector('#draft-type-redraft')
const superflex_radio_button = document.querySelector('#roster-type-superflex')
const standard_radio_button = document.querySelector('#roster-type-standard')

const all_position_switches = document.querySelectorAll('.position-switch')
all_select_buttons = document.querySelectorAll('.select-player')
all_insert_buttons = document.querySelectorAll('.insert-button')
all_insert_up_buttons = document.querySelectorAll('.insert-up')
all_insert_down_buttons = document.querySelectorAll('.insert-down')

superflex_radio_button.checked = true

let show_qbs = true
let show_rbs = true
let show_wrs = true
let show_tes = true

function update_positional_boolean(position, is_checked) {
  if (position == 'QB') {
    show_qbs = is_checked
  }
  if (position == 'RB') {
    show_rbs = is_checked
  }
  if (position == 'WR') {
    show_wrs = is_checked
  }
  if (position == 'TE') {
    show_tes = is_checked
  }
}

function filter_rows_for_all_positions() {
  filter_rows_for_position('QB', show_qbs)
  filter_rows_for_position('RB', show_rbs)
  filter_rows_for_position('WR', show_wrs)
  filter_rows_for_position('TE', show_tes)
}

all_position_switches.forEach(adp_switch => {
  adp_switch.checked = true
  adp_switch.addEventListener('change', (event) => { 
    position = event.target.value
    should_display = event.target.checked
    update_positional_boolean(position, should_display)
    filter_rows_for_position(position, should_display)
    set_drag_drop()
  })
})

function hide_all_insert_buttons() {
  all_insert_buttons.forEach(insert_button => {
    insert_button.style.visibility = 'hidden'
  })
}

function display_all_insert_buttons() {
  all_insert_buttons.forEach(insert_button => {
    insert_button.style.visibility = 'visible'
  })
}

function clear_redundant_selects(value){
  all_select_buttons.forEach(select_button =>{
    if(select_button.classList.contains("select-player") && select_button.value != value){
      ancestor = select_button.closest(".draggable")
      ancestor.classList.remove('selected')
      select_button.checked = false
    }
  })
}

function clear_all_selects() {
  all_select_buttons.forEach(select_button => {
    if (select_button.classList.contains("select-player")) {
      ancestor = select_button.closest(".draggable")
      ancestor.classList.remove('selected')
      select_button.checked = false
    }
  })
}

function find_draggable_container(current_ranking) {
  ret = -1
  draggable_containers.forEach(draggable_container =>{
    if(draggable_container.classList.contains(current_ranking)){
      ret = draggable_container
    }
  })
  return ret 
}

all_insert_down_buttons.forEach(insert_down_button => {
  insert_down_button.style.display = 'none'
  insert_down_button.addEventListener('click', e => {
    e.preventDefault()
    current_ranking = insert_down_button.id.split('-')[2]
    draggable_container = find_draggable_container(current_ranking)
    
    ancestor = insert_down_button.closest(".draggable")
    ancestor.classList.add('target')
    afterElement = getDragAfterElementForTarget(draggable_container, e.clientY) 
    ancestor.classList.remove('target')
    selected = document.querySelector('.selected')
    if (afterElement == null) {
      draggable_container.appendChild(selected)
    } else {
      draggable_container.insertBefore(selected, afterElement)
    }
    setRanks(draggable_container)
    hide_all_insert_buttons()
    clear_all_selects()
    toggle_hidden_toggle_button_columns()
  })
  
})

all_insert_up_buttons.forEach(insert_up_button => {
  insert_up_button.style.display='none'
  insert_up_button.addEventListener('click', e => {
    e.preventDefault()
    current_ranking = insert_up_button.id.split('-')[2]
    draggable_container = find_draggable_container(current_ranking)
    
    selected = document.querySelector('.selected')
    ancestor = insert_up_button.closest(".draggable")
    draggable_container.insertBefore(selected, ancestor)
    setRanks(draggable_container)
    hide_all_insert_buttons()
    clear_all_selects()
    toggle_hidden_toggle_button_columns()
  })
})

all_select_buttons.forEach(select_button => {
    select_button.addEventListener('change', e =>{
      value = e.target.value
      if (e.target.classList.contains("select-player") && e.target.checked) {    
        ancestor = e.target.closest(".draggable")
        ancestor.classList.add('selected')
        clear_redundant_selects(value)
        display_all_insert_buttons()
        id_chunks = e.target.id.split('-')
        id_tag = `${id_chunks[2]}-${id_chunks[3]}`

        toggle_hidden_toggle_button_columns()

        insert_up_button = document.querySelector(`#insert-up-${id_tag}`).parentElement
        insert_down_button = document.querySelector(`#insert-down-${id_tag}`).parentElement
        above_insert_down_button = e.target.parentElement.parentElement.parentElement.previousElementSibling.querySelector('.insert-down').parentElement
        below_insert_up_button = e.target.parentElement.parentElement.parentElement.nextElementSibling.querySelector('.insert-up').parentElement
        
        insert_up_button.style.visibility = 'hidden'
        insert_down_button.style.visibility = 'hidden'
        above_insert_down_button.style.visibility = 'hidden'
        below_insert_up_button.style.visibility = 'hidden'

      } else {
        hide_all_insert_buttons()
        toggle_hidden_toggle_button_columns()
      }
    })
})

function toggle_hidden_toggle_button_columns() {
  document.querySelectorAll('.table-element-hideable').forEach(table_element => {
    table_element.classList.toggle('table-element-defaults-to-hidden')
  })
}

function disable_insert_buttons() {
  all_select_buttons.forEach( select_button => {select_button.disabled = true} )
  all_insert_up_buttons.forEach( insert_up_button =>{insert_up_button.disabled = true} )
  all_insert_down_buttons.forEach( insert_down_button =>{insert_down_button.disabled = true} )
}

function enable_insert_buttons() {
  all_select_buttons.forEach( select_button => {select_button.disabled = false} )
  all_insert_up_buttons.forEach( insert_up_button =>{insert_up_button.disabled = false} )
  all_insert_down_buttons.forEach( insert_down_button =>{insert_down_button.disabled = false} )
}


function set_drag_drop() {
  if(show_qbs && show_rbs && show_wrs && show_tes){
    enable_drag_drop()
    enable_insert_buttons()
  } else{
    disable_drag_drop()
    disable_insert_buttons()
  }
}

function enable_drag_drop(){
  rows = document.querySelectorAll('.draggable')
  rows.forEach(row => {
    row.draggable = true
  })
}

function disable_drag_drop(){
  rows = document.querySelectorAll('.draggable')
  rows.forEach(row => {
    row.draggable = false
  })
}

function filter_rows_for_position(position, should_display) {
  rows = document.querySelectorAll(get_query_selector(position))
  rows.forEach(row => {
    if (should_display) {
      row.style.display = 'table-row'
    } else {
      row.style.display = 'none'
    }
  })
}

function get_query_selector(position) {
  return '.row-position-' + position
}

var ranking_to_display = document.getElementById('ranking_to_display')
if (ranking_to_display == null) {
  ranking_to_display = 'redraft_superflex-ranking'
} else {
  var ranking_to_display = JSON.parse(document.getElementById('ranking_to_display').textContent);
}

function hide_and_show_table_containers(table_container_to_display) {
  rankings_table_containers.forEach(rankings_table_container => {
    rankings_table_container.style.display = 'none';
  })
  document.querySelector('#' + table_container_to_display).style.display = 'block';
}

if (redraft_radio_button) {
  redraft_radio_button.addEventListener('change', () => {
    roster_type = superflex_radio_button.checked ? 'superflex': 'standard'
    show_id = 'redraft_' + roster_type + '_ranking'
    hide_and_show_table_containers(show_id)
  })
}

superflex_radio_button.addEventListener('change', () => {
  superflex_radio_button.checked = true
  standard_radio_button.checked = false
  show_id = 'redraft_superflex_ranking'
  hide_and_show_table_containers(show_id)
})
standard_radio_button.addEventListener('change', () => {
  superflex_radio_button.checked = false
  standard_radio_button.checked = true
  show_id = 'redraft_standard_ranking'
  hide_and_show_table_containers(show_id)
})

draggables.forEach(draggable => {
  draggable.addEventListener('dragstart', () => {
    draggable.classList.add('dragging')
  })
  draggable.addEventListener('dragend', () => {
    draggable.classList.remove('dragging')
  })
})

draggable_containers.forEach(draggable_container => {
  draggable_container.addEventListener('dragover', e => {
    e.preventDefault()
    const afterElement = getDragAfterElement(draggable_container, e.clientY)
    const draggable = document.querySelector('.dragging')
    if (afterElement == null) {
      draggable_container.appendChild(draggable)
    } else {
      draggable_container.insertBefore(draggable, afterElement)
    }
    setRanks(draggable_container)
  })
})

function getRankForRow(element) {
  return element.querySelector('.rank').textContent
}

function setRankForRow(element, rank) {
  element.querySelector('.rank').textContent = rank
}

function setRanks(draggable_container) {
  elements = [...draggable_container.querySelectorAll('.draggable')]
  
  for(i = 0; i < elements.length; i++) {
    setRankForRow(elements[i], i + 1)
  }
}

function getDragAfterElementForTarget(container, y) {
  const draggable_elements = [...container.querySelectorAll('.draggable:not(.target)')]

  return draggable_elements.reduce((closest, child) => {
    const box = child.getBoundingClientRect()
    const offset = y - box.top - box.height / 2
    if (offset < 0 && offset > closest.offset) {
      return { offset: offset, element: child }
    } else {
      return closest
    }
  }, { offset: Number.NEGATIVE_INFINITY }).element
}

function getDragAfterElement(container, y) {
  const draggable_elements = [...container.querySelectorAll('.draggable:not(.dragging)')]

  return draggable_elements.reduce((closest, child) => {
    const box = child.getBoundingClientRect()
    const offset = y - box.top - box.height / 2
    if (offset < 0 && offset > closest.offset) {
      return { offset: offset, element: child }
    } else {
      return closest
    }
  }, { offset: Number.NEGATIVE_INFINITY }).element
}

function initialize_rankings_display(ranking_to_display) {
  chunks = ranking_to_display.split('_')

  if (chunks[1] == 'superflex') {
    superflex_radio_button.checked = true
  } else {
    standard_radio_button.checked = true
  }
  hide_and_show_table_containers(ranking_to_display)
}

hide_all_insert_buttons()
initialize_rankings_display(ranking_to_display)
